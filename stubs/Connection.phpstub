<?php
// phpcs:ignoreFile
namespace Doctrine\DBAL;

use Doctrine\DBAL\Driver\Connection as DriverConnection;
use Doctrine\DBAL\Driver\Statement as DriverStatement;
use Doctrine\DBAL\Types\Type;

class Connection implements DriverConnection
{
    /**
     * @var int
     * @deprecated Use TransactionIsolationLevel::READ_UNCOMMITTED.
     */
    public const TRANSACTION_READ_UNCOMMITTED = TransactionIsolationLevel::READ_UNCOMMITTED;

    /**
     * @var int
     * @deprecated Use TransactionIsolationLevel::READ_COMMITTED.
     */
    public const TRANSACTION_READ_COMMITTED = TransactionIsolationLevel::READ_COMMITTED;

    /**
     * @var int
     * @deprecated Use TransactionIsolationLevel::REPEATABLE_READ.
     */
    public const TRANSACTION_REPEATABLE_READ = TransactionIsolationLevel::REPEATABLE_READ;

    /**
     * @var int
     * @deprecated Use TransactionIsolationLevel::SERIALIZABLE.
     */
    public const TRANSACTION_SERIALIZABLE = TransactionIsolationLevel::SERIALIZABLE;

    /** @var int */
    public const PARAM_INT_ARRAY = ParameterType::INTEGER + self::ARRAY_PARAM_OFFSET;

    /** @var int */
    public const PARAM_STR_ARRAY = ParameterType::STRING + self::ARRAY_PARAM_OFFSET;

    /** @var int */
    public const ARRAY_PARAM_OFFSET = 100;

    /**
     * @throws DBALException
     * @psalm-taint-sink sql $statement
     */
    public function prepare(string $statement): DriverStatement {}

    /**
     * @psalm-taint-sink sql $statement
     */
    public function exec(string $statement): int {}

    /**
     * @psalm-param string[] $query The SQL query parts.
     *
     * @throws DBALException
     * @psalm-taint-sink sql $query
     */
    public function query(...$query): DriverStatement {}

    /**
     * @psalm-param array<mixed>           $params The query parameters.
     * @psalm-param array<int|string|null> $types  The parameter types.
     *
     * @throws DBALException
     * @psalm-taint-sink sql $query
     */
    public function executeUpdate(string $query, array $params = [], array $types = []): int {}

    /**
     * @psalm-param list<mixed>|array<string, mixed>                                     $params Statement parameters
     * @psalm-param array<int, int|string|Type|null>|array<string, int|string|Type|null> $types  Parameter types
     *
     * @throws DBALException
     * @psalm-taint-sink sql $sql
     */
    public function executeStatement($sql, array $params = [], array $types = []): int {}

    /**
     * @psalm-pure
     *
     * @psalm-param mixed $input
     * @psalm-return string
     *
     * @psalm-taint-escape sql
     * @psalm-flow ($input) -> return
     */
    public function quote($input, int $type = ParameterType::STRING);
}
